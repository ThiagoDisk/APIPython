# -*- coding: utf-8 -*-
"""Check-doc-content.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b9PlOG9cYDp_cd26JIMdjrgcNfHsP8Bg
"""

from validate_docbr import CPF, CNH, CNPJ, PIS, TituloEleitoral

import docx2txt
import re
import pycep_correios
import phonenumbers
import textract
import os

def validate_cpf(doc):
    cpf = CPF()
    return cpf.validate(doc)

def validate_cnh(doc):
    cnh = CNH()
    return cnh.validate(doc)

def validate_cnpj(doc):
    cnpj = CNPJ()
    return cnpj.validate(doc)

def validate_pis(doc):
    pis = PIS()
    return pis.validate(doc)

def validate_titulo(doc):
    titulo = TituloEleitoral()
    return titulo.validate(doc)

def validate_cep(cep):
  if re.match("[0-9]{5}-[0-9]{3}", cep) or re.match("[0-9]{5}[0-9]{3}", cep):
    endereco = pycep_correios.get_address_from_cep(cep)
    return endereco
  return False

def validate_celular(telefone):
  if not telefone[:3] == "+55":
    telefone = "+55" + telefone

  z = phonenumbers.parse(telefone, None)

  return phonenumbers.is_valid_number(z)

def validate_cep(cep):
  if re.match("[0-9]{5}-[0-9]{3}", cep) or re.match("[0-9]{5}[0-9]{3}", cep):
    endereco = pycep_correios.get_address_from_cep(cep)
    return endereco
  return False

def verificacoes(texto):
  lines = texto.split('\n')
  returnMsg = 'Validados: '

  for line in lines:
    if line:
      for word in line.split(' '):
        if word == '':
          continue
        try:
          word = word.strip()

          if validate_cpf(word):
            returnMsg += ", tem cpf"

          if len(word) == 9:
            endereco = validate_cep(word)
            if endereco:
              returnMsg += ", tem cep" + endereco

          if validate_celular(word):
            returnMsg += ", tem celular"

          if validate_cnh(word):
            returnMsg += ", tem cnh"
          
          if validate_cnpj(word):
            returnMsg += ", tem cnpj"

          if validate_pis(word):
            returnMsg += ", tem pis"

          if validate_titulo(word):
            returnMsg += ", tem titulo"
        except:
          continue
  return returnMsg

def verificar_docx(arquivo):
  result = docx2txt.process(arquivo)
  return verificacoes(result)

def verificar_txt(arquivo):
  result = open(arquivo, "r")
  return verificacoes(result.read())

def verificar_pdf(arquivo):
  texto = textract.process(arquivo)
  texto = texto.decode("utf-8") 
  return verificacoes(texto)

def verificar_documento(arquivo):
  arquivo_partes = arquivo.split('.')
  ext = arquivo_partes[len(arquivo_partes)-1]
  msg = ''
  
  if os.path.isfile(arquivo):
    print("Verificando -- " + arquivo)
    if ext.lower() == 'txt':
      msg = verificar_txt(arquivo)
    elif ext.lower() == 'pdf':
      msg = verificar_pdf(arquivo)
    elif ext.lower() == 'docx':
      msg = verificar_docx(arquivo)
    else:
      return 'Tipo inválido'
      
    return msg
  else:
    return 'Arquivo não encontrado.'

def verificar_diretorio():
  files = os.listdir()
  for arquivo in files:
    verificar_documento(arquivo)

#verificar_documento("TCC_COM CPF.pdf")
#verificar_documento("TG.txt")
#verificar_documento("TCC_COM CPF.docx")